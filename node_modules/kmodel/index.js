var mongoose = require("mongoose"),
    thunkify = require("thunkify"),
    Schema = mongoose.Schema;

var modelpath = "./features/";

exports.connect = function(url, path){
    
    modelpath = path || "./features/";
    if(this.connected) return this;
    mongoose.connect(url||'mongodb://localhost:27017/test');
    this.connected = true;
    return this;
};

var Type = {
    
    string: String,

    number: Number,

    date:  Date,

    boolean: Boolean,

    buffer: Buffer,

    object: {}, 

    array: Array

};

var mixin = function(base, sup, option){

    if(option) mixin(base, option);

    for(var name in sup)
        base[name] = sup[name];

    return base;
};

var extend = function(sub, sup){
    var f = new Function();
    f.prototype = sup.prototype;
    sub.prototype = new f();
    sub.prototype.constructor = f.prototype;
};

var Class = function(model){
    this.model = model;
};

// 创建 Model
var createSchema = function(format, modelname){

    var schemas = {}, type;

    for(var key in format){
        type = format[key];
        if(type == undefined) continue;
        schemas[key] = Type[type];
    }

    schemas.ctime = Date;
    schemas.utime = Date;




    var schema = new Schema(schemas);

    



    var model  = mongoose.model(modelname, schema);

    return model;
};

var methods = {

    insertOne: function(instance, callback){
        instance.ctime = Date.now();
        instance.utime = Date.now();
        var m = new this.model(instance);
        m.save(callback||function(){});
    },

    updateOne: function(instance, option, callback){

        var model = this.model;

        if(!option) option = {_id: instance.id};
        instance.utime = Date.now();
        model.findOneAndUpdate(option, instance, callback);
    },

    deleteOne: function(option, callback){
        this.model.findOneAndRemove(option, callback);
    },

    queryOne: function(option, callback){
        this.model.findOne(option).exec(callback);
    },

    find: function(option, callback){
        this.model.find(option).exec(callback);
    },
    findall: function(callback){
        this.model.find({}).exec(callback);
    },

    remove: function(option, callback){
        this.model.remove(option, callback);
    },

    query: function(option, callback){
        this.model.find(option).exec(callback);
    },
    limit: function(option, limit, callback){
        var o = {};
        o["$query"] = option;
        o["$orderby"] = {ctime: -1};

        this.model.find(o).limit(limit).exec(callback);
    },

    range: function(option, skip, limit, callback){
        var o = {};
        o["$query"] = option;
        o["$orderby"] = {ctime: -1};

        this.model.find(o).skip(skip).limit(limit).exec(callback);
    }
};



for(var key in methods){

    var handle = methods[key];

    methods[key] = function(){
        return thunkify(handle);
    }();
}
Class.prototype = methods;




exports.create = function(format, name){
    
    var m = createSchema(format, name),
        instance = new Class();
    
    instance.model = m;
    
    return instance;
};

exports.extend = function(instance, name, handler){
    instance[name] = handler;
};

exports.callback = function(callback){
    return function(err, instance){
        callback(instance || err);
    };
};

exports.all = function(name,  handler){
    Class.prototype[name] = handler;
};


exports.load = function(name){

    var f = this.loaded[name];

    if(f) return f;

    var handler = require(modelpath+name);

    this.loaded[name] = handler[name](this);

    return this.loaded[name];
};

exports.loaded = {};
exports.Class = Class;
